<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2013 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;formato-template&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2013 sp1 (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<style type="text/css">
					<xsl:comment>@import  url("default.css");</xsl:comment>
				</style>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:1.81in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="font-family:Soberana Sans; font-size:9pt; ">
				<xsl:variable name="altova:table">
					<table border="0" cellpadding="0" cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_0" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="height:0.590551181in; text-align:center; ">
									<span>
										<xsl:text>Programa 3x1 para Migrantes 2016</xsl:text>
									</span>
									<br/>
									<span>
										<xsl:text>Plan de Negocios</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:for-each select="$XML">
					<xsl:for-each select="Result">
						<xsl:for-each select="Formato">
							<xsl:variable name="altova:table">
								<table border="0" cellpadding="0" cellspacing="0" width="100%">
									<xsl:variable name="altova:CurrContextGrid_1" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<tbody>
										<tr>
											<td style="width:3.54330709in; ">
												<xsl:variable name="altova:table">
													<table cellpadding="0" cellspacing="0" class="border-type-1" width="100%">
														<xsl:variable name="altova:CurrContextGrid_2" select="."/>
														<xsl:variable name="altova:ColumnData"/>
														<tbody>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
																	<span class="field-title-1">
																		<xsl:text>Homoclave del formato</xsl:text>
																	</span>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; ">
																	<xsl:for-each select="@HomoClave">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
																	<span class="field-title-1">
																		<xsl:text>Fecha de publicaci√≥n del formato en el DOF</xsl:text>
																	</span>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="vertical-align:bottom; width:3.54330709in; ">
																	<xsl:variable name="altova:table">
																		<table border="0" cellpadding="0" cellspacing="0" width="100%">
																			<xsl:variable name="altova:CurrContextGrid_3" select="."/>
																			<xsl:variable name="altova:ColumnData"/>
																			<tbody style="padding:0; ">
																				<tr>
																					<td style="border:0; border-right-color:#A0A2A2; border-right-style:solid; border-right-width:thin; line-height:11px; padding:0; padding-top:6px; text-align:center; ">
																						<xsl:for-each select="@FechaPublicacionDia">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:33%; " class="field-mini-1">
																							<xsl:text>DD</xsl:text>
																						</span>
																					</td>
																					<td style="border:0; line-height:11px; padding:0; padding-top:6px; text-align:center; " valign="bottom">
																						<xsl:for-each select="@FechaPublicacionMes">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:34%; " class="field-mini-1">
																							<xsl:text>MM</xsl:text>
																						</span>
																					</td>
																					<td style="border:0; border-left-color:#A0A2A2; border-left-style:solid; border-left-width:thin; line-height:11px; padding:0; padding-top:6px; text-align:center; ">
																						<xsl:for-each select="@FechaPublicacionAno">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:33%; " class="field-mini-1">
																							<xsl:text>AAAA</xsl:text>
																						</span>
																					</td>
																				</tr>
																			</tbody>
																		</table>
																	</xsl:variable>
																	<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																	<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																	<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																		<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																	</xsl:apply-templates>
																</td>
															</tr>
														</tbody>
													</table>
												</xsl:variable>
												<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
												<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
												<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
													<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												</xsl:apply-templates>
											</td>
											<td style="width:0.196850394in; "/>
											<td style="width:3.54330709in; ">
												<xsl:variable name="altova:table">
													<table cellpadding="0" cellspacing="0" class="border-type-1" width="100%">
														<xsl:variable name="altova:CurrContextGrid_4" select="."/>
														<xsl:variable name="altova:ColumnData"/>
														<tbody>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
																	<span class="field-title-1">
																		<xsl:text>Folio de Solicitud</xsl:text>
																	</span>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; ">
																	<xsl:for-each select="@FolioSolicitud">
																		<span>
																			<xsl:value-of select="string(.)"/>
																		</span>
																	</xsl:for-each>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
																	<span class="field-title-1">
																		<xsl:text>Fecha de Solicitud</xsl:text>
																	</span>
																</td>
															</tr>
															<tr style="height:0.275590551in; ">
																<td style="vertical-align:bottom; width:3.54330709in; ">
																	<xsl:variable name="altova:table">
																		<table border="0" cellpadding="0" cellspacing="0" width="100%">
																			<xsl:variable name="altova:CurrContextGrid_5" select="."/>
																			<xsl:variable name="altova:ColumnData"/>
																			<tbody style="padding:0; ">
																				<tr>
																					<td style="border:0; border-right-color:#A0A2A2; border-right-style:solid; border-right-width:thin; line-height:11px; padding:0; padding-top:6px; text-align:center; ">
																						<xsl:for-each select="@FechaPublicacionDia">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:33%; " class="field-mini-1">
																							<xsl:text>DD</xsl:text>
																						</span>
																					</td>
																					<td style="border:0; line-height:11px; padding:0; padding-top:6px; text-align:center; " valign="bottom">
																						<xsl:for-each select="@FechaPublicacionMes">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:34%; " class="field-mini-1">
																							<xsl:text>MM</xsl:text>
																						</span>
																					</td>
																					<td style="border:0; border-left-color:#A0A2A2; border-left-style:solid; border-left-width:thin; line-height:11px; padding:0; padding-top:6px; text-align:center; ">
																						<xsl:for-each select="@FechaPublicacionAno">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																						<br/>
																						<span style="width:33%; " class="field-mini-1">
																							<xsl:text>AAAA</xsl:text>
																						</span>
																					</td>
																				</tr>
																			</tbody>
																		</table>
																	</xsl:variable>
																	<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																	<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																	<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																		<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																	</xsl:apply-templates>
																</td>
															</tr>
														</tbody>
													</table>
												</xsl:variable>
												<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
												<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
												<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
													<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												</xsl:apply-templates>
											</td>
										</tr>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
				<xsl:variable name="altova:table">
					<table border="0" cellpadding="0" cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_6" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr style="height:0.196850394in; ">
								<td/>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table border="0" cellpadding="0" cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_7" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr style="height:0.196850394in; ">
								<td style="padding-bottom:0.0984252in; padding-top:0.0984252in; text-align:center; " class="cell-type-1">
									<span>
										<xsl:text>I. Datos generales del migrante solicitante</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table border="0" cellpadding="0" cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_8" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr style="height:0.196850394in; ">
								<td/>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
				<xsl:variable name="altova:table">
					<table border="0" cellpadding="0" cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_9" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:3.54330709in; ">
									<xsl:for-each select="$XML">
										<xsl:for-each select="Result">
											<xsl:for-each select="Solicitante">
												<xsl:for-each select="Informacion">
													<xsl:variable name="altova:table">
														<table cellpadding="0" cellspacing="0" width="100%">
															<xsl:variable name="altova:CurrContextGrid_10" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<tr style="height:0.275590551in; ">
																	<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
																		<span class="field-title-1">
																			<xsl:text>Informaci√≥n del migrante solicitante</xsl:text>
																		</span>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; padding-top:3px; vertical-align:middle; " class="cell-type-1-alt">
																		<span class="field-title-1">
																			<xsl:text>CURP (opcional): </xsl:text>
																		</span>
																		<xsl:for-each select="@CURP">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
																		<span class="field-title-1">
																			<xsl:text>Nombre(s):</xsl:text>
																		</span>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																		<xsl:for-each select="@Nombre">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
																		<span class="field-title-1">
																			<xsl:text>Primer apellido: </xsl:text>
																		</span>
																		<xsl:for-each select="@PrimeApellido">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
																		<span class="field-title-1">
																			<xsl:text>Segundo apellido: </xsl:text>
																		</span>
																		<xsl:for-each select="@SegundoApellido">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</td>
																</tr>
																<tr style="height:0.275590551in; " class="border-type-1">
																	<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
																		<span class="field-title-1">
																			<xsl:text>Edad:</xsl:text>
																		</span>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																		<xsl:for-each select="@Edad">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; " class="cell-type-1-alt">
																		<xsl:variable name="altova:table">
																			<table border="0" cellpadding="0" cellspacing="0" width="100%">
																				<xsl:variable name="altova:CurrContextGrid_11" select="."/>
																				<xsl:variable name="altova:ColumnData"/>
																				<tbody style="padding:0; ">
																					<tr style="height:13px; ">
																						<td style="border:0; vertical-align:middle; width:0.77in; " class="field-title-1">
																							<span class="field-title-1">
																								<xsl:text>Sexo:</xsl:text>
																							</span>
																						</td>
																						<td style="border:0; ">
																							<span class="field-title-1">
																								<xsl:text>( </xsl:text>
																							</span>
																							<xsl:for-each select="@SexoHombre">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																							<span class="field-title-1">
																								<xsl:text> ) Hombre</xsl:text>
																							</span>
																						</td>
																						<td style="border:0; ">
																							<span class="field-title-1">
																								<xsl:text>( </xsl:text>
																							</span>
																							<xsl:for-each select="@SexoMujer">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																							<span class="field-title-1">
																								<xsl:text> ) Mujer</xsl:text>
																							</span>
																						</td>
																					</tr>
																				</tbody>
																			</table>
																		</xsl:variable>
																		<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																		<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																		<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																			<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																		</xsl:apply-templates>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="height:0.393701in; padding:0.0984252in; vertical-align:top; " class="border-type-1">
																		<span class="field-title-1">
																			<xsl:text>Actividad principal en el extranjero:</xsl:text>
																		</span>
																	</td>
																</tr>
																<tr>
																	<td style="height:0.393701in; padding:0.0984252in; vertical-align:top; " class="border-type-1">
																		<span class="field-title-1">
																			<xsl:text>Documento de identificaci√≥n que compruebe nacionalidad mexicana:1</xsl:text>
																		</span>
																	</td>
																</tr>
																<tr style="height:0.275590551in; ">
																	<td style="padding-left:0.0984252in; " class="border-type-1">
																		<span class="field-title-1">
																			<xsl:text>N√∫mero:</xsl:text>
																		</span>
																	</td>
																</tr>
															</tbody>
														</table>
													</xsl:variable>
													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
													<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
														<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
													</xsl:apply-templates>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</td>
								<td style="width:0.196850394in; "/>
								<td style="vertical-align:top; width:3.54330709in; ">
									<xsl:variable name="altova:table">
										<table cellpadding="0" cellspacing="0" width="100%">
											<xsl:variable name="altova:CurrContextGrid_12" select="."/>
											<xsl:variable name="altova:ColumnData"/>
											<tbody>
												<tr style="height:0.275590551in; ">
													<td style="text-align:center; width:3.54330709in; " class="cell-type-1">
														<span class="field-title-1">
															<xsl:text>Domicilio del migrante solicitante</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="height:0.393701in; padding:0.0984252in; vertical-align:top; " class="border-type-1">
														<span class="field-title-1">
															<xsl:text>N√∫mero y calle:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Ciudad:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Estado:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; " class="border-type-1">
													<td style="padding-top:3px; vertical-align:bottom; width:3.54330709in; ">
														<xsl:variable name="altova:table">
															<table border="0" cellpadding="0" cellspacing="0" width="100%">
																<xsl:variable name="altova:CurrContextGrid_13" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<tbody style="padding:0; ">
																	<tr style="height:13px; ">
																		<td style="border:0; padding-left:0.0984252in; vertical-align:middle; " class="field-title-1">
																			<span>
																				<xsl:text>C√≥digo Postal</xsl:text>
																			</span>
																		</td>
																		<td style="border:0; vertical-align:bottom; width:0.82677in; " class="border-left-1">
																			<xsl:variable name="altova:table">
																				<table style="margin:0; padding:0; vertical-align:bottom; " border="0" cellpadding="0" cellspacing="0" width="100%">
																					<xsl:variable name="altova:CurrContextGrid_14" select="."/>
																					<xsl:variable name="altova:ColumnData"/>
																					<tbody>
																						<tr>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; "/>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; " class="border-left-1"/>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; " class="border-left-1"/>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; " class="border-left-1"/>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; " class="border-left-1"/>
																							<td style="height:7px; vertical-align:bottom; width:0.137795in; " class="border-left-1"/>
																						</tr>
																					</tbody>
																				</table>
																			</xsl:variable>
																			<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
																			<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
																			<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
																			</xsl:apply-templates>
																		</td>
																		<td style="border:0; vertical-align:bottom; width:1.6in; " class="border-left-1"/>
																	</tr>
																</tbody>
															</table>
														</xsl:variable>
														<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
														<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
														</xsl:apply-templates>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Condado:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; " class="border-type-1">
													<td style="padding-left:0.0984252in; vertical-align:middle; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Pa√≠s:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Comprobante de domicilio que presenta:2</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Tel√©fono de casa:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Tel√©fono celular:</xsl:text>
														</span>
													</td>
												</tr>
												<tr style="height:0.275590551in; ">
													<td style="padding-left:0.0984252in; " class="cell-type-1-alt">
														<span class="field-title-1">
															<xsl:text>Correo electr√≥nico:</xsl:text>
														</span>
													</td>
												</tr>
											</tbody>
										</table>
									</xsl:variable>
									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
									</xsl:apply-templates>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:variable>
				<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
				<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
				<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
					<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
				</xsl:apply-templates>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
